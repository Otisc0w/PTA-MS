<!DOCTYPE html>
<html>

<head>
	<title>PTA | Membership Status</title>
	<link rel="icon" type="image/x-icon" href="../images/favicon.ico" />
	<link rel="stylesheet" type="text/css" href="../stylesheets/membership-ncc.css" />
	<link rel="stylesheet" type="text/css" href="../stylesheets/navbar.css" />
	<link rel="stylesheet" type="text/css" href="../stylesheets/footer.css" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

<body style="margin:0;" class="container">
	<div class="header">
		{{> navbar}}
	</div>

	<div class="content-container">
		<div class="leftside">
			<div class="forumtitle">
				<h1 class="forumname"></h1>
				<h3 class="forumdesc">Apply for NCC ID</h3>
			</div>
		</div>
		<div class="rightside">
			<div class="formcontainer">
				<form id="nccform" action="/submit-ncc" method="post" enctype="multipart/form-data">
					<!-- Page 1 -->
					<div class="ncc-page ncc-page1">
						<div class="form-row">
							<div class="form-group">
								<label for="firstname">First Name</label>
								<input type="text" id="firstname" name="firstname" value="{{user.firstname}}" required>
							</div>
							<div class="form-group">
								<label for="middlename">M.I.</label>
								<input type="text" id="middlename" name="middlename" value="{{user.middlename}}"
									required>
							</div>
							<div class="form-group">
								<label for="lastname">Last Name</label>
								<input type="text" id="lastname" name="lastname" value="{{user.lastname}}" required>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="gender">Gender</label>
								<select id="gender" name="gender" required>
									<option value="female" {{#if (eq usersncc.gender "female" )}}selected{{/if}}>Female
									</option>
									<option value="male" {{#if (eq usersncc.gender "male" )}}selected{{/if}}>Male
									</option>
								</select>
							</div>
							<div class="form-group">
								<label for="bday">Birthday</label>
								<input type="date" id="bday" name="bday" value="{{usersncc.bday}}" required>
							</div>
							<div class="form-group">
								<label for="age">Age:</label>
								<input type="number" id="age" name="age" readonly>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="phonenum">Mobile Number</label>
								<input type="tel" id="phonenum" name="phonenum" value="{{usersncc.phonenum}}"
									pattern="\d{4}\d{3}\d{4}" placeholder="0912-345-6789" required>
							</div>
							<div class="form-group">
								<label for="email">E-mail</label>
								<input type="email" id="email" name="email" value="{{user.email}}" required>
							</div>
							<div class="form-group">
								<label for="confemail">Confirm E-mail</label>
								<input type="email" id="confemail" name="confemail" required>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="lastpromo">Date of Last Promotion Test</label>
								<input type="date" id="lastpromo" name="lastpromo" required>
							</div>
							<div class="form-group">
								<label for="promolocation">Location of Last Promotion</label>
								<select name="promolocation" id="promolocation" required>
									<option value="Region I – Ilocos Region">Region I – Ilocos Region</option>
									<option value="Region II – Cagayan Valley">Region II – Cagayan Valley</option>
									<option value="Region III – Central Luzon">Region III – Central Luzon</option>
									<option value="Region IV‑A – CALABARZON">Region IV‑A – CALABARZON</option>
									<option value="MIMAROPA Region">MIMAROPA Region</option>
									<option value="Region V – Bicol Region">Region V – Bicol Region</option>
									<option value="Region VI – Western Visayas">Region VI – Western Visayas</option>
									<option value="Region VII – Central Visayas">Region VII – Central Visayas</option>
									<option value="Region VIII – Eastern Visayas">Region VIII – Eastern Visayas</option>
									<option value="Region IX – Zamboanga Peninsula">Region IX – Zamboanga Peninsula
									</option>
									<option value="Region X – Northern Mindanao">Region X – Northern Mindanao</option>
									<option value="Region XI – Davao Region">Region XI – Davao Region</option>
									<option value="Region XII – SOCCSKSARGEN">Region XII – SOCCSKSARGEN</option>
									<option value="Region XIII – Caraga">Region XIII – Caraga</option>
									<option value="NCR – National Capital Region">NCR – National Capital Region</option>
									<option value="CAR – Cordillera Administrative Region">CAR – Cordillera
										Administrative Region</option>
									<option value="BARMM – Bangsamoro Autonomous Region in Muslim Mindanao">BARMM –
										Bangsamoro Autonomous Region in Muslim Mindanao</option>
								</select>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="clubregion">Province of Club</label>
								<select name="clubregion" id="clubregion" required>
									<option value="Aurora">Aurora</option>
									<option value="Bataan">Bataan</option>
									<option value="Bulacan">Bulacan</option>
									<option value="Nueva Ecija">Nueva Ecija</option>
									<option value="Pampanga">Pampanga</option>
									<option value="Tarlac">Tarlac</option>
									<option value="Zamabales">Zamabales</option>
								</select>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="beltlevel">Current Belt Level</label>
								<select name="beltlevel" id="beltlevel" required>
									<option value="White Belt" {{#if (eq usersathlete.beltlevel "White Belt"
										)}}selected{{/if}}>White Belt</option>
									<option value="Low Yellow Belt" {{#if (eq usersathlete.beltlevel "Low Yellow Belt"
										)}}selected{{/if}}>Low Yellow Belt</option>
									<option value="High Yellow Belt" {{#if (eq usersathlete.beltlevel "High Yellow Belt"
										)}}selected{{/if}}>High Yellow Belt</option>
									<option value="Low Blue Belt" {{#if (eq usersathlete.beltlevel "Low Blue Belt"
										)}}selected{{/if}}>Low Blue Belt</option>
									<option value="High Blue Belt" {{#if (eq usersathlete.beltlevel "High Blue Belt"
										)}}selected{{/if}}>High Blue Belt</option>
									<option value="Low Red Belt" {{#if (eq usersathlete.beltlevel "Low Red Belt"
										)}}selected{{/if}}>Low Red Belt</option>
									<option value="High Red Belt" {{#if (eq usersathlete.beltlevel "High Red Belt"
										)}}selected{{/if}}>High Red Belt</option>
									<option value="Low Brown Belt" {{#if (eq usersathlete.beltlevel "Low Brown Belt"
										)}}selected{{/if}}>Low Brown Belt</option>
									<option value="High Brown Belt" {{#if (eq usersathlete.beltlevel "High Brown Belt"
										)}}selected{{/if}}>High Brown Belt</option>
									<option value="Junior/Poom Black Belt" {{#if (eq
										usersathlete.beltlevel "Junior/Poom Black Belt" )}}selected{{/if}}>Junior/Poom
										Black Belt</option>
									<option value="Black/Dan Belt" {{#if (eq usersathlete.beltlevel "Black/Dan Belt"
										)}}selected{{/if}}>Black/Dan Belt</option>
								</select>
							</div>
						</div>

						<div class="form-row button-group">
							<button class="cancel-button" type="button"
								onclick="window.location.href='membership';">Cancel</button>
							<button class="next-button" type="button" onclick="showNextPage()">Next</button>
						</div>
					</div>
					<!-- Page 2 -->
					<div class="ncc-page ncc-page2 hidden">
						<div class="form-row">
							<div class="form-group">
								<label for="instructorfirstname">Instructor First Name</label>
								<input type="text" id="instructorfirstname" name="instructorfirstname"
									value="{{headInstructor.firstname}}" required>
							</div>
							<div class="form-group">
								<label for="instructormi">Instructor M.I.</label>
								<input type="text" id="instructormi" name="instructormi"
									value="{{headInstructor.middlename}}" required>
							</div>
							<div class="form-group">
								<label for="instructorlastname">Instructor Last Name</label>
								<input type="text" id="instructorlastname" name="instructorlastname"
									value="{{headInstructor.lastname}}" required>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<label for="instructormobile">Instructor Mobile Number</label>
								<input type="tel" id="instructormobile" name="instructormobile"
									pattern="\d{4}\d{3}\d{4}" placeholder="0912-345-6789"
									value="{{headInstructor.phonenum}}" required>
							</div>
							<div class="form-group">
								<label for="instructoremail">Instructor E-mail</label>
								<input type="email" id="instructoremail" name="instructoremail"
									value="{{headInstructor.email}}" required>
							</div>
							<div class="form-group">
								<label for="confemail">Verify E-mail</label>
								<input type="email" id="confemail" name="confemail" required>
							</div>
						</div>

						<div class="form-row button-group">
							<button class="cancel-button" type="button" onclick="showPreviousPage()">Previous</button>
							<button class="next-button" type="button" onclick="showNextPage()">Next</button>
						</div>
					</div>
					<!-- Page 3 -->

					<div class="ncc-page ncc-page3 hidden">
						<div class="form-row">
							<div class="form-group">
								<label for="birthcert">Birth Certificate NSO/PSA</label>
								{{#if usersncc.birthcert}}
								<p>&#10003; Uploaded</p>
								{{else}}
								<input type="file" id="birthcert" name="birthcert" required>
								{{/if}}
							</div>
							<div class="form-group">
								<label for="portrait">1:1 Player Picture</label>
								{{#if usersncc.portrait}}
								<p>&#10003; Uploaded</p>
								{{else}}
								<input type="file" id="portrait" name="portrait" required>
								{{/if}}
							</div>
							<div class="form-group">
								<label for="signature">Sign Here</label>
								<input type="text" id="signature" name="signature" {{#if
									usersncc.signature}}disabled{{/if}} required>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<input type="checkbox" id="terms" name="terms" required>
								<label for="terms">I AGREE TO THE TERMS OF SERVICE</label>
								<p>Certification, Waiver and Release Form<br>
									1. I hereby certify that the above information is true and correct.<br>
									2. I acknowledge, fully understand and will abide by the rules and regulations of
									PTA.<br>
									3. I do hereby waive, release and discharge any and all liabilities from death,
									injuries or damages arising from my own negligence, furthermore I or my family, will
									waive and release any or all rights, claims for damages from the entire PTA body
									including the PTA Officers, PTA competition officials, PTA instructors, or any
									department/facility of PTA like PTA Admin, PTA Competitions Management Team or
									Digital Team from any Taekwondo related issues.
								</p>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<input type="checkbox" id="waiver" name="waiver" required>
								<label for="waiver">I AGREE TO THIS WAIVER AND RELEASE FORM</label>
							</div>
						</div>

						<div class="form-row button-group">
							<button class="cancel-button" type="button" onclick="showPreviousPage()">Previous</button>
							<button class="next-button" type="button" onclick="showNextPage()">Next</button>
						</div>
					</div>

					<div class="ncc-page ncc-page4 hidden">
						<img class="paymentqr" src="/images/paymentqr.png" alt="Payment QR Code"><br>
						<h3>Scan the QR code to pay the application fee of PHP 500.00</h3><br>
						<div class="form-row">
							<div class="form-group">
								<label for="paymentproof">Upload Payment Proof</label>
								{{#if usersncc.paymentproof}}
								<p>&#10003; Already Paid</p>
								{{else}}
								<input type="file" id="paymentproof" name="paymentproof" required>
								{{/if}}

							</div>
						</div>
						<button class="cancel-button" type="button" onclick="showPreviousPage()">Previous</button>
						<button class="next-button" type="submit"
							onclick="showConfirmationMessage(event)">Submit</button>
						<p id="error-message" style="color:red;"></p>
					</div>
				</form>


				<div id="confirmation-message" class="hidden">Application successful! Please allow up to 2 weeks to
					receive an update on your
					membership status.
				</div>
			</div>
		</div>
	</div>

	{{> footer}}

	<script src="/scripts/navbar.js"></script>
	<script src="/scripts/footer.js"></script>
	<style>
		.hidden {
			display: none;
		}
	</style>
	<script>

		function toggleDropdown() {
			document.getElementById("dropdown").classList.toggle("show");
		}

		window.onclick = function (event) {
			if (!event.target.matches('.profile-pic img')) {
				var dropdowns = document.getElementsByClassName("dropdown-content");
				for (var i = 0; i < dropdowns.length; i++) {
					var openDropdown = dropdowns[i];
					if (openDropdown.classList.contains('show')) {
						openDropdown.classList.remove('show');
					}
				}
			}
		}

		let currentPage = 0;
		const pages = document.querySelectorAll('.ncc-page');

		function showPage(pageIndex) {
			pages.forEach((page, index) => {
				page.classList.toggle('hidden', index !== pageIndex);
			});
		}

		function showNextPage() {
			if (currentPage < pages.length - 1) {
				currentPage++;
				showPage(currentPage);
			}
		}

		function showPreviousPage() {
			if (currentPage > 0) {
				currentPage--;
				showPage(currentPage);
			}
		}

		// Initial display setup
		showPage(currentPage);

		function calculateAge(birthday) {
			const today = new Date();
			const birthDate = new Date(birthday);
			let age = today.getFullYear() - birthDate.getFullYear();
			const monthDifference = today.getMonth() - birthDate.getMonth();

			if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
				age--;
			}

			return age;
		}

		window.addEventListener('DOMContentLoaded', (event) => {
			const bdayInput = document.getElementById('bday');
			const ageInput = document.getElementById('age');

			bdayInput.addEventListener('input', () => {
				const birthday = bdayInput.value;
				if (birthday) {
					const age = calculateAge(birthday);
					ageInput.value = age;
				} else {
					ageInput.value = '';
				}
			});
		});

		function showConfirmationMessage(event) {
			event.preventDefault(); // Prevent form submission to validate fields

			const form = document.getElementById("nccform");
			const confirmationMessage = document.getElementById("confirmation-message");
			const errorMessage = document.getElementById("error-message");

			// Hide both confirmation and error messages initially
			confirmationMessage.classList.add("hidden");
			errorMessage.classList.add("hidden");

			// Check if all required fields are filled out
			let allFieldsFilled = true;
			const requiredFields = form.querySelectorAll("[required]");
			requiredFields.forEach((field) => {
				if (!field.value) {
					allFieldsFilled = false;
					field.classList.add("error"); // Optionally highlight empty fields
				} else {
					field.classList.remove("error");
				}
			});

			// If all fields are filled, show confirmation and submit form after delay
			if (allFieldsFilled) {
				confirmationMessage.classList.remove("hidden");
				setTimeout(() => {
					form.submit();
				}, 2000); // Adjust the delay as needed
			} else {
				// Show general error message if some fields are missing
				errorMessage.textContent = "Please fill up all fields before submitting.";
				errorMessage.classList.remove("hidden");
			}
		}

		document.addEventListener("DOMContentLoaded", function () {
			let currentPage = 0;
			const pages = document.querySelectorAll(".ncc-page");
			const nextButtons = document.querySelectorAll(".next-button");
			const prevButtons = document.querySelectorAll(".cancel-button");
			const emailInput = document.getElementById("email");
			const confirmEmailInput = document.getElementById("confemail");

			function validateForm() {
				const currentFormPage = pages[currentPage];
				const requiredFields = currentFormPage.querySelectorAll("[required]");
				let allValid = true;
				let firstInvalidField = null;

				requiredFields.forEach(field => {
					const errorSpan = field.nextElementSibling; // Look for error message span

					if (!field.value.trim() || !field.checkValidity()) {
						allValid = false;

						// Show error message if missing
						if (!errorSpan || !errorSpan.classList.contains("error-message")) {
							const errorMsg = document.createElement("span");
							errorMsg.classList.add("error-message");
							errorMsg.style.color = "red";
							errorMsg.style.fontSize = "12px";
							errorMsg.innerText = "This field is required or invalid.";
							field.parentNode.appendChild(errorMsg);
						}

						// Focus the first invalid field
						if (!firstInvalidField) firstInvalidField = field;
					} else {
						// Remove error message if valid
						if (errorSpan && errorSpan.classList.contains("error-message")) {
							errorSpan.remove();
						}
					}
				});

				// 🔴 Ensure email and confirm email match
				if (emailInput && confirmEmailInput) {
					const emailErrorSpan = confirmEmailInput.nextElementSibling;

					if (emailInput.value !== confirmEmailInput.value) {
						confirmEmailInput.setCustomValidity("Emails do not match!");
						allValid = false;

						// Show specific error message for email mismatch
						if (!emailErrorSpan || !emailErrorSpan.classList.contains("error-message")) {
							const errorMsg = document.createElement("span");
							errorMsg.classList.add("error-message");
							errorMsg.style.color = "red";
							errorMsg.style.fontSize = "12px";
							errorMsg.innerText = "Emails do not match.";
							confirmEmailInput.parentNode.appendChild(errorMsg);
						}
						if (!firstInvalidField) firstInvalidField = confirmEmailInput;
					} else {
						confirmEmailInput.setCustomValidity("");
						if (emailErrorSpan && emailErrorSpan.classList.contains("error-message")) {
							emailErrorSpan.remove();
						}
					}
				}

				console.log(`Page ${currentPage} - Next button enabled: ${allValid}`);
				nextButtons[currentPage].disabled = !allValid;

				return allValid;
			}

			// Ensure input fields update validation dynamically
			document.querySelectorAll("input, select").forEach(input => {
				input.addEventListener("input", validateForm);
				input.addEventListener("change", validateForm);
				input.addEventListener("blur", validateForm);
			});

			// Click event for Next buttons
			nextButtons.forEach((button, index) => {
				button.addEventListener("click", function (event) {
					if (!validateForm()) {
						event.preventDefault();
						alert("Please correct all errors before proceeding.");
					} else if (index < pages.length - 1) {
						currentPage++;
						showPage(currentPage);
					}
				});
			});

			// Click event for Previous buttons
			prevButtons.forEach(button => {
				button.addEventListener("click", function () {
					if (currentPage > 0) {
						currentPage--;
						showPage(currentPage);
					}
				});
			});

			function showPage(pageIndex) {
				pages.forEach((page, index) => {
					page.classList.toggle("hidden", index !== pageIndex);
				});

				// 🔴 Enforce revalidation whenever a page is displayed
				validateForm();
			}

			// Run validation immediately when the page loads
			showPage(currentPage);
		});
	</script>
</body>
</html>