<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PTA | Reports</title>
  <link rel="icon" type="image/x-icon" href="../images/favicon.ico" />
  <link rel="stylesheet" type="text/css" href="../stylesheets/analytics.css" />
  <link rel="stylesheet" type="text/css" href="../stylesheets/navbar.css" />
  <link rel="stylesheet" type="text/css" href="../stylesheets/footer.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

{{#if user.ptaverified}}

<body class="container">
  <div class="header">
    {{> navbar}}
  </div>

  <div class="analytics-title">
    <div class="analytics-subtitle">
      <h1>PTA Reports</h1>
      <p>Gain Insights into the Overall Performance, Financial Health, and Membership Trends of the Philippine Taekwondo
        Association.</p>
    </div>
  </div>

  <div class="reports-container">
    <h1>Admin Reports</h1>

    <div class="report-tabs">
      <button class="tablink" onclick="openReport(event, 'payments')">Payments/Transactions</button>
      <button class="tablink" onclick="openReport(event, 'membership')">Membership Applications</button>
      <button class="tablink" onclick="openReport(event, 'events')">Events</button>
      <button class="tablink" onclick="openReport(event, 'clubs')">Clubs</button>
      <button class="tablink" onclick="openReport(event, 'competitions')">Competitions</button>
      <button class="tablink" onclick="openReport(event, 'insights')">Other Insights</button>
    </div>

    <div class="date-filter">
      <label for="start-date">Start Date:</label>
      <input type="date" id="start-date" name="start-date">
      <label class="end-date" for="end-date">End Date:</label>
      <input type="date" id="end-date" name="end-date">

      <button onclick="filterByDate()">Apply</button>

      <button onclick="cancelFilter()">Remove Filter</button>

      <label class="end-date" for="search-user">Search User:</label>
      <input type="text" id="search-user" name="search-user" onkeyup="searchUser()">

      <select id="regtypefilter" onchange="toggleSection(this.value)">
        <option value="all">All</option>
        <option value="nccregs">NCC Registrations</option>
        <option value="instructorregs">Instructor Registrations</option>
        <option value="clubregs">Club Registrations</option>
      </select>

      <select id="regtypefiltertxn" onchange="toggleTxnSection(this.value)">
        <option value="all">All</option>
        <option value="nccregs">NCC Registrations</option>
        <option value="instructorregs">Instructor Registrations</option>
        <option value="clubregs">Club Registrations</option>
      </select>

      <script>
        function toggleTxnSection(selectedCategory) {
          const rows = document.querySelectorAll('#transactions-body tr');
          rows.forEach(row => row.style.display = 'none'); // Hide all rows

          if (selectedCategory === 'nccregs') {
            rows.forEach(row => {
              if (row.cells[3].innerText.toLowerCase().includes('ncc')) {
                row.style.display = '';
              }
            });
          } else if (selectedCategory === 'instructorregs') {
            rows.forEach(row => {
              if (row.cells[3].innerText.toLowerCase().includes('instructor')) {
                row.style.display = '';
              }
            });
          } else if (selectedCategory === 'clubregs') {
            rows.forEach(row => {
              if (row.cells[3].innerText.toLowerCase().includes('club')) {
                row.style.display = '';
              }
            });
          } else if (selectedCategory === 'all') {
            rows.forEach(row => row.style.display = '');
          }
        }
      </script>

      <select id="regstatusfilter" onchange="filterStatus(this.value)">
        <option value="all">All</option>
        <option value="Expired">Expired</option>
        <option value="approved">Approved</option>
        <option value="rejected">Rejected</option>
        <option value="under review">Under Review</option>
        <option value="id shipped">ID Shipped</option>
      </select>

      <select id="province-filter" onchange="filterByProvince(this.value)">
        <option value="all">All</option>
        <option value="Pampanga">Pampanga</option>
        <option value="Nueva Ecija">Nueva Ecija</option>
        <option value="Tarlac">Tarlac</option>
        <option value="Bulacan">Bulacan</option>
        <option value="Bataan">Bataan</option>
        <option value="Zambales">Zambales</option>
        <option value="Aurora">Aurora</option>
      </select>

      <script>
        function filterByProvince(selectedProvince) {
          const rows = document.querySelectorAll('#clubs-body tr');
          rows.forEach(row => {
            const province = row.cells[2].innerText.toLowerCase();
            if (selectedProvince === 'all' || province.includes(selectedProvince.toLowerCase())) {
              row.style.display = '';
            } else {
              row.style.display = 'none';
            }
          });
        }
      </script>

      <script>
        function filterStatus(selectedStatus) {
          const rows = document.querySelectorAll('#membership-body tr');
          const selectedCategory = document.querySelector('#regtypefilter').value;

          rows.forEach(row => {
            const status = row.cells[2].innerText.toLowerCase();
            const category = row.cells[0].innerText.toLowerCase();

            const categoryMatch = selectedCategory === 'all' || category.startsWith(selectedCategory);
            const statusMatch = selectedStatus === 'all' || status.includes(selectedStatus.toLowerCase());

            if (categoryMatch && statusMatch) {
              row.style.display = '';
            } else {
              row.style.display = 'none';
            }
          });
        }
      </script>
    </div>


    <div id="payments" class="report-section" style="display:block">
      <h2>Payments/Transactions</h2>

      <div class="report-summary" id="all-summary">
        <div class="total-revenue">
          <h3>Total Revenue from Registration Fees:</h3>
          <h2>PHP {{formatMoney membershiptotalrevenue}}</h2>
        </div>
        <div class="total-revenue">
          <h3>Total Fee Payments:</h3>
          <h2>{{transactionsCount}}</h2>
        </div>
        <div class="total-revenue">
          <p>NCC: <strong>{{nccTransactionsCount}}</strong></p>
          <p>Instructor: <strong>{{instructorTransactionsCount}}</strong></p>
          <p>Club: <strong>{{clubTransactionsCount}}</strong></p>
        </div>
      </div>

      <div class="report-summary" id="ncc-summary" style="display:none;">
        <div class="total-revenue">
          <h3>Total Revenue from NCC Registration Fees:</h3>
          <h2>PHP {{formatMoney totalNccRevenue}}</h2>
        </div>
        <div class="total-revenue">
          <h3>Total NCC Fee Payments:</h3>
          <h2>{{nccTransactionsCount}}</h2>
        </div>
      </div>

      <div class="report-summary" id="instructor-summary" style="display:none;">
        <div class="total-revenue">
          <h3>Total Revenue from Instructor Registration Fees:</h3>
          <h2>PHP {{formatMoney totalInstructorRevenue}}</h2>
        </div>
        <div class="total-revenue">
          <h3>Total Instructor Fee Payments:</h3>
          <h2>{{instructorTransactionsCount}}</h2>
        </div>
      </div>

      <div class="report-summary" id="club-summary" style="display:none;">
        <div class="total-revenue">
          <h3>Total Revenue from Club Registration Fees:</h3>
          <h2>PHP {{formatMoney totalClubRevenue}}</h2>
        </div>
        <div class="total-revenue">
          <h3>Total Club Fee Payments:</h3>
          <h2>{{clubTransactionsCount}}</h2>
        </div>
      </div>

      <script>
        document.getElementById('regtypefiltertxn').addEventListener('change', function () {
          const selectedCategory = this.value;
          document.getElementById('all-summary').style.display = selectedCategory === 'all' ? 'block' : 'none';
          document.getElementById('ncc-summary').style.display = selectedCategory === 'nccregs' ? 'block' : 'none';
          document.getElementById('instructor-summary').style.display = selectedCategory === 'instructorregs' ? 'block' : 'none';
          document.getElementById('club-summary').style.display = selectedCategory === 'clubregs' ? 'block' : 'none';
        });
      </script>

      <!-- New div for right alignment -->
      <div class="export-container">
        <button class="export-csv-btn" onclick="exportTransactionsTableToCSV('payments.csv')">Export to CSV</button>
      </div>


      <div class="report-table">
        <table class="transactions-table">
          <thead>
            <tr>
              <th style="position: sticky; top: 0; z-index: 1;">Transaction ID</th>
              <th style="position: sticky; top: 0; z-index: 1;">User</th>
              <th style="position: sticky; top: 0; z-index: 1;">Amount</th>
              <th style="position: sticky; top: 0; z-index: 1;">Type</th>
              <th style="position: sticky; top: 0; z-index: 1; cursor: pointer;" onclick="toggleSort('date')">Date</th>
              <script>
                let sortOrder = 'asc';

                function toggleSort(column) {
                  const rows = Array.from(document.querySelectorAll('#transactions-body tr'));
                  const headers = document.querySelectorAll('.transactions-table th');
                  const dateHeader = Array.from(headers).find(header => header.innerText.toLowerCase().includes('date'));
                  let columnIndex = -1;

                  headers.forEach((header, index) => {
                    if (header.innerText.toLowerCase().includes(column.toLowerCase())) {
                      columnIndex = index;
                    }
                  });

                  if (columnIndex === -1) return;

                  rows.sort((a, b) => {
                    const cellA = a.cells[columnIndex].innerText;
                    const cellB = b.cells[columnIndex].innerText;

                    if (sortOrder === 'asc') {
                      return cellA.localeCompare(cellB);
                    } else {
                      return cellB.localeCompare(cellA);
                    }
                  });

                  sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
                  if (dateHeader) {
                    dateHeader.innerText = `Date ${sortOrder === 'asc' ? '↑' : '↓'}`;
                  }

                  const tbody = document.querySelector('#transactions-body');
                  tbody.innerHTML = '';
                  rows.forEach(row => tbody.appendChild(row));
                }
              </script>

            </tr>
          </thead>
          <tbody id="transactions-body">
            {{#each transactions}}
            <tr>
              <td style="position: sticky; top: 0; z-index: 1;">TXN{{id}}</td>
              <td style="position: sticky; top: 0; z-index: 1;">{{name}}</td>
              <td style="position: sticky; top: 0; z-index: 1;">{{amount}}</td>
              <td style="position: sticky; top: 0; z-index: 1;">{{type}}</td>
              <td style="position: sticky; top: 0; z-index: 1;" onclick="toggleApplicationDateSort('date')">{{formatDate
                created_at "MM/DD/YYYY"}}</td>
              <script>
                let applicationSortOrder = 'asc';

                function toggleApplicationDateSort() {
                  const rows = Array.from(document.querySelectorAll('#membership-body tr'));
                  const headers = document.querySelectorAll('.membership-table th');
                  const dateHeader = Array.from(headers).find(header => header.innerText.toLowerCase().includes('date'));
                  let columnIndex = -1;

                  headers.forEach((header, index) => {
                    if (header.innerText.toLowerCase().includes('date')) {
                      columnIndex = index;
                    }
                  });

                  if (columnIndex === -1) return;

                  rows.sort((a, b) => {
                    const cellA = a.cells[columnIndex].innerText;
                    const cellB = b.cells[columnIndex].innerText;

                    if (applicationSortOrder === 'asc') {
                      return new Date(cellA) - new Date(cellB);
                    } else {
                      return new Date(cellB) - new Date(cellA);
                    }
                  });

                  applicationSortOrder = applicationSortOrder === 'asc' ? 'desc' : 'asc';
                  if (dateHeader) {
                    dateHeader.innerText = `Date ${applicationSortOrder === 'asc' ? '↑' : '↓'}`;
                  }

                  const tbody = document.querySelector('#membership-body');
                  tbody.innerHTML = '';
                  rows.forEach(row => tbody.appendChild(row));
                }
              </script>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <div id="membership" class="report-section" style="display:block">
      <h2>Membership Applications</h2>

      <!--First Row -->
      <div class="report-row">
        <div class="report-summary" id="ncc-bd-summary">
          <div class="total-revenue">
            <h3>NCC Applications Breakdown:</h3>
            <p>Under Review: {{underReviewNccsCount}}</p>
            <p>Accepted: {{acceptedNccsCount}}</p>
            <p>ID Shipped: {{idShippedNccsCount}}</p>
            <p>Rejected: {{rejectedNccsCount}}</p>
            <p>Suspended: {{suspendedNccsCount}}</p>
            <p>Expired: {{expiredNccsCount}}</p>
          </div>
          <div class="chart-container" style="width: 300px; height: 300px;">
            <canvas id="nccappsbreakdown"></canvas>
          </div>
        </div>

        <script>
          document.addEventListener("DOMContentLoaded", function () {
            var ctx = document.getElementById('nccappsbreakdown').getContext('2d');
            var nccAppsBreakdownChart = new Chart(ctx, {
              type: 'doughnut',
              data: {
                labels: ['Under Review', 'Accepted', 'ID Shipped', 'Rejected', 'Suspended', 'Expired'],
                datasets: [{
                  data: [{{ underReviewNccsCount }}, {{ acceptedNccsCount }}, {{ idShippedNccsCount }}, {{ rejectedNccsCount }}, {{ suspendedNccsCount }}, {{ expiredNccsCount }}],
            backgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF', '#9000ad',],
            hoverBackgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF', '#9000ad']
            }]
          },
            options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
              }
            }
          }
        });
      });
        </script>

        <div class="report-summary" id="instructor-bd-summary">
          <div class="total-revenue">
            <h3>Instructor Applications Breakdown:</h3>
            <p>Under Review: {{underReviewInstructorsCount}}</p>
            <p>Accepted: {{enrouteInstructorsCount}}</p>
            <p>ID Shipped: {{idShippedInstructorsCount}}</p>
            <p>Rejected: {{rejectedInstructorsCount}}</p>
            <p>Suspended: {{suspendedInstructorsCount}}</p>
            <p>Expired: {{expiredInstructorsCount}}</p>
          </div>
          <div class="chart-container" style="width: 300px; height: 300px;">
            <canvas id="instructorAppsBreakdown"></canvas>
          </div>
        </div>


        <script>
          document.addEventListener("DOMContentLoaded", function () {
            var ctx = document.getElementById('instructorAppsBreakdown').getContext('2d');
            var instructorAppsBreakdownChart = new Chart(ctx, {
              type: 'doughnut',
              data: {
                labels: ['Under Review', 'Accepted', 'ID Shipped', 'Rejected', 'Suspended', 'Expired'],
                datasets: [{
                  data: [{{ underReviewInstructorsCount }}, {{ acceptedInstructorsCount }}, {{ idShippedInstructorsCount }}, {{ rejectedInstructorsCount }}, {{ suspendedInstructorsCount }}, {{ expiredInstructorsCount }}],
            backgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF'],
            hoverBackgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF']
            }]
          },
            options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
              }
            }
          }
        });
      });
        </script>

        <div class="report-summary" id="club-bd-summary">
          <div class="total-revenue">
            <h3>Club Applications Breakdown:</h3>
            <p>Processing: {{underReviewClubsCount}}</p>
            <p>Accepted and Registered: {{acceptedClubsCount}}</p>
            <p>Rejected: {{rejectedClubsCount}}</p>
          </div>
          <div class="chart-container" style="width: 300px; height: 300px;">
            <canvas id="clubAppsBreakdown"></canvas>
          </div>
        </div>
      </div>

      <script>
        document.addEventListener("DOMContentLoaded", function () {
          var ctx = document.getElementById('clubAppsBreakdown').getContext('2d');
          var clubAppsBreakdownChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
              labels: ['Under Review', 'Accepted', 'ID Shipped', 'Rejected', 'Suspended', 'Expired'],
              datasets: [{
                data: [{{ underReviewClubsCount }}, {{ acceptedClubsCount }}, {{ idShippedClubsCount }}, {{ rejectedClubsCount }}, {{ suspendedClubsCount }}, {{ expiredClubsCount }}],
          backgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF'],
          hoverBackgroundColor: ['#FFCE56', '#36A2EB', '#32a852', '#FF6384', '#ad6b00', '#C9CBCF']
            }]
          },
          options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
            }
          }
        }
        });
      });
      </script>
      <button class="export-csv-btn" onclick="exportMembershipsTableToCSV('payments.csv')">Export to CSV</button>
      <p></p>
      <div class="report-table">
        <table class="membership-table">
          <thead>
            <tr>
              <th style="position: sticky; top: 0; z-index: 1;">Application ID</th>
              <th style="position: sticky; top: 0; z-index: 1;">Submitted By</th>
              <th style="position: sticky; top: 0; z-index: 1;">Status</th>
              <th style="position: sticky; top: 0; z-index: 1;">Created On</th>
              <th style="position: sticky; top: 0; z-index: 1;">Expires On</th>
            </tr>
          </thead>
          <tbody id="membership-body">
            {{#each nccRegistrations}}
            <tr>
              <td>NCCAPP{{id}}</td>
              <td>{{firstname}} {{lastname}}</td>
              <td>{{{formatStatus status}}}</td>
              <td>{{formatDate created_at "MM/DD/YYYY"}}</td>
              <td>{{formatDate expireson "MM/DD/YYYY"}} <button onclick="location.href='/membership-review/{{id}}'"
                  class="gotoeventbtn">&rarr;</button></td>
            </tr>
            {{/each}}
            {{#each instructorRegistrations}}
            <tr>
              <td>INSAPP{{id}}</td>
              <td>{{firstname}} {{lastname}}</td>
              <td>{{{formatStatus status}}}</td>
              <td>{{formatDate created_at "MM/DD/YYYY"}}</td>
              <td>{{formatDate expireson "MM/DD/YYYY"}} <button onclick="location.href='/instructor-review/{{id}}'"
                  class="gotoeventbtn">&rarr;</button></td>
            </tr>
            {{/each}}
            {{#each clubRegistrations}}
            <tr>
              <td>CLUBAPP{{id}}</td>
              <td>{{firstname}} {{lastname}}</td>
              <td>{{{formatStatus status}}}</td>
              <td>{{formatDate created_at "MM/DD/YYYY"}}</td>
              <td>{{formatDate expireson "MM/DD/YYYY"}} <button onclick="location.href='/clubreg-review/{{id}}'"
                  class="gotoeventbtn">&rarr;</button></td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <div id="events" class="report-section" style="display:none">
      <h2>Upcoming Events</h2>
      
      <!-- 
        Server-side data requirements:
        - eventsCount - Total number of events
        - kyorugiEventsCount - Number of Kyorugi events
        - poomsaeEventsCount - Number of Poomsae events
        - promotionEventsCount - Number of Promotion events
      -->
      
      <!-- Event Count with Category Filters -->
      <div class="event-count-section">
        <div class="event-type-filter">
          <button class="event-filter-btn active" onclick="filterEventType('all')">All Events</button>
          <button class="event-filter-btn" onclick="filterEventType('kyorugi')">Kyorugi</button>
          <button class="event-filter-btn" onclick="filterEventType('poomsae')">Poomsae</button>
          <button class="event-filter-btn" onclick="filterEventType('promotion')">Promotion</button>
        </div>
        
        <div class="event-count-container">
          <div class="totaleventcount-box" id="all-events-count">
            Total Event Count:<h3> {{eventsCount}}</h3>
          </div>
          
          <div class="totaleventcount-box" id="kyorugi-events-count" style="display: none;">
            Kyorugi Events:<h3> {{kyorugiEventsCount}}</h3>
          </div>
          
          <div class="totaleventcount-box" id="poomsae-events-count" style="display: none;">
            Poomsae Events:<h3> {{poomsaeEventsCount}}</h3>
          </div>
          
          <div class="totaleventcount-box" id="promotion-events-count" style="display: none;">
            Promotion Events:<h3> {{promotionEventsCount}}</h3>
          </div>
        </div>
      </div>

      <div>
        {{#each firstplacers}}
          {{athleteid}}
        {{/each}}
      </div>
      
      <div class="report-table">
        {{#each eventsByMonth}}
        <h3>{{@key}}</h3>
        <div class="events-list">
          {{#each this}}
          <div class="event-card">
            <h4>{{name}}</h4>
            <p>Date: {{formatDate date "YYYY-MM-DD"}}</p>
            <p>Location: {{location}}</p>
            <p>Description: {{description}}</p>
            <p>Registration Cap: {{registrationcap}}</p>
            <p>Status: {{status}}</p>
            <button onclick="location.href='/events-details/{{id}}'" class="gotoeventbtn">Go to Event</button>
          </div>
          {{/each}}
        </div>
        {{/each}}
      </div>
    </div>

    <div id="clubs" class="report-section" style="display:none">
      <h2>Clubs</h2>
      <button class="export-csv-btn" onclick="exportClubsTableToCSV('clubs.csv')">Export to CSV</button>
      <p></p>
      
      <!-- Added Club Location Breakdown chart -->
      <h3>Club location breakdown:</h3>
      <div class="chart-table">
        <div class="chart-container" style="width: 500px; height: 500px;">
          <canvas id="clubsChart"></canvas>
        </div>
        <div class="insights-summary">
          <p data-label="Total Clubs:">{{clubsCount}}</p>
        </div>
      </div>
      
      <div class="report-table">
        <table class="clubs-table">
          <thead>
            <tr>
              <th>Club ID</th>
              <th>Club Name</th>
              <th>Province</th>
              <th>Registeree</th>
              <th>Address</th>
              <th>Date Joined</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="clubs-body">
            {{#each clubs}}
            <tr>
              <td>CLUB{{id}}</td>
              <td>{{clubname}}</td>
              <td>{{province}}</td>
              <td>{{registeree}}</td>
              <td>{{clubaddress}}</td>
              <td>{{formatDate created_at "MM/DD/YYYY"}}</td>
              <td><button onclick="location.href='/clubs-details/{{id}}'" class="gotoclubbtn">Go to Club</button></td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <div id="competitions" class="report-section" style="display:none">
      <h2>Competition Results</h2>
      
      <div class="date-filter">
        <select id="time-period" onchange="filterCompetitions()">
          <option value="all">All Time</option>
          <option value="month">This Month</option>
          <option value="quarter">This Quarter</option>
          <option value="year">This Year</option>
        </select>
        
        <select id="event-type-filter" onchange="filterCompetitions()">
          <option value="all">All Events</option>
          <option value="Kyorugi">Kyorugi</option>
          <option value="Poomsae">Poomsae</option>
        </select>
      </div>

      <button class="export-csv-btn" onclick="exportCompetitionsToCSV('competitions.csv')">
        Export to CSV
      </button>

      <div class="report-table">
        <table class="competitions-table">
          <thead>
            <tr>
              <th>Event</th>
              <th>Date</th>
              <th>Athlete</th>
              <th>Rank</th>
              <th>Category</th>
              <th>Club</th>
            </tr>
          </thead>
          <tbody id="competitions-body">
            {{#each competitionResultsByQuarter}}
              <tr>
                <td colspan="6" style="font-weight: bold; text-align: center;">{{@key}}</td>
              </tr>
              {{#each this}}
                <tr>
                  <td>{{eventname}}</td>
                  <td>{{formatDate created_at "MM/DD/YYYY"}}</td>
                  <td>{{athlete.name}}</td>
                  <td>{{ranking}}{{#if dq}}({{dq}}){{/if}}</td>
                  <td>{{eventlocation}}</td>
                  <td>{{athlete.club}}</td>
                </tr>
              {{/each}}
            {{/each}}
          </tbody>
        </table>
      </div>

      <div class="chart-container" style="width: 800px; height: 400px;">
        <canvas id="competitionsChart"></canvas>
      </div>
      
      <script>
        document.addEventListener("DOMContentLoaded", function() {
          // Initialize with all data visible
          filterCompetitions();
          
          // Create Competition Results Chart
          renderCompetitionsChart();
        });
        
        function filterCompetitions() {
          const timePeriod = document.getElementById('time-period').value;
          const eventType = document.getElementById('event-type-filter').value;
          const now = new Date();
          
          // Get all competition rows
          const rows = document.querySelectorAll('#competitions-body tr');
          
          rows.forEach(row => {
            const date = new Date(row.cells[1].textContent);
            const matchesEvent = eventType === 'all' || 
              row.cells[4].textContent.toLowerCase().includes(eventType.toLowerCase());
            
            let matchesPeriod = true;
            switch(timePeriod) {
              case 'month':
                matchesPeriod = date.getMonth() === now.getMonth() && 
                              date.getFullYear() === now.getFullYear();
                break;
              case 'quarter':
                const currentQuarter = Math.floor(now.getMonth() / 3);
                matchesPeriod = Math.floor(date.getMonth() / 3) === currentQuarter &&
                              date.getFullYear() === now.getFullYear();
                break;
              case 'year':
                matchesPeriod = date.getFullYear() === now.getFullYear();
                break;
            }
            
            row.style.display = (matchesPeriod && matchesEvent) ? '' : 'none';
          });
          
          // Update chart after filtering
          renderCompetitionsChart();
        }
        
        function renderCompetitionsChart() {
          const ctx = document.getElementById('competitionsChart').getContext('2d');
          
          // Get visible rows after filtering
          const visibleRows = Array.from(document.querySelectorAll('#competitions-body tr'))
            .filter(row => row.style.display !== 'none');
          
          // Count medals by club
          const clubMedals = {};
          visibleRows.forEach(row => {
            const club = row.querySelector('td:nth-child(7)').textContent;
            const rank = parseInt(row.querySelector('td:nth-child(4)').textContent) || 0;
            
            if (!clubMedals[club]) {
              clubMedals[club] = { gold: 0, silver: 0, bronze: 0 };
            }
            
            if (rank === 1) clubMedals[club].gold++;
            else if (rank === 2) clubMedals[club].silver++;
            else if (rank === 3) clubMedals[club].bronze++;
          });
          
          // Prepare data for chart
          const labels = Object.keys(clubMedals);
          const goldData = labels.map(club => clubMedals[club].gold);
          const silverData = labels.map(club => clubMedals[club].silver);
          const bronzeData = labels.map(club => clubMedals[club].bronze);
          
          // Check if chart already exists and destroy if it does
          if (window.competitionsChart) {
            window.competitionsChart.destroy();
          }
          
          // Create chart
          window.competitionsChart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Gold',
                  data: goldData,
                  backgroundColor: '#FFD700',
                  borderColor: '#B8860B',
                  borderWidth: 1
                },
                {
                  label: 'Silver',
                  data: silverData,
                  backgroundColor: '#C0C0C0',
                  borderColor: '#A9A9A9',
                  borderWidth: 1
                },
                {
                  label: 'Bronze',
                  data: bronzeData,
                  backgroundColor: '#CD7F32',
                  borderColor: '#8B4513',
                  borderWidth: 1
                }
              ]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                x: {
                  stacked: false,
                  title: {
                    display: true,
                    text: 'Club'
                  }
                },
                y: {
                  stacked: false,
                  beginAtZero: true,
                  title: {
                    display: true,
                    text: 'Medal Count'
                  }
                }
              },
              plugins: {
                title: {
                  display: true,
                  text: 'Medal Count by Club'
                },
                tooltip: {
                  callbacks: {
                    afterTitle: function(tooltipItems) {
                      return 'Total Medals: ' + tooltipItems.reduce((sum, item) => {
                        return sum + item.parsed.y;
                      }, 0);
                    }
                  }
                }
              }
            }
          });
        }
        
        function exportCompetitionsToCSV(filename) {
          const csv = [];
          const headers = [];
          const rows = document.querySelectorAll(".competitions-table tr");
          
          // Get headers
          const headerRow = rows[0];
          const headerCells = headerRow.querySelectorAll("th");
          headerCells.forEach(cell => {
            headers.push(cell.textContent);
          });
          csv.push(headers.join(","));
          
          // Get visible rows
          for (let i = 1; i < rows.length; i++) {
            if (rows[i].style.display !== 'none') {
              const row = [];
              const cells = rows[i].querySelectorAll("td");
              cells.forEach(cell => {
                // Escape commas in cell content
                row.push(`"${cell.textContent.replace(/"/g, '""')}"`);
              });
              csv.push(row.join(","));
            }
          }
          
          // Download CSV file
          const csvContent = csv.join("\n");
          const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
          const link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.setAttribute("download", filename);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      </script>
    </div>

    <div id="insights" class="report-section" style="display:none">
      <h2>Other Insights</h2>

      <h3>New Membership Applications Over Time:</h3>
      <div class="chart-table">
        <div class="time-filter">
          <button class="time-filter-btn active" onclick="changeTimeView('monthly')">Monthly</button>
          <button class="time-filter-btn" onclick="changeTimeView('quarterly')">Quarterly</button>
          <button class="time-filter-btn" onclick="changeTimeView('yearly')">Yearly</button>
        </div><br>
        <div class="chart-container" style="width: 800px; height: 400px;">
          <canvas id="applicationsTimeChart"></canvas>
        </div>
      </div>

      <h3>Monthly Revenue Comparison:</h3>
      <div class="chart-table">
        <div class="chart-container" style="width: 800px; height: 400px;">
          <canvas id="revenueComparisonChart"></canvas>
        </div>
        <div class="revenue-summary" style="display: flex !important; flex-direction: row !important; flex-wrap: nowrap !important; overflow-x: auto !important; width: 100% !important;">
          <div class="revenue-comparison-card" style="width: 270px !important; flex: 0 0 auto !important;">
            <h4>Total Registration Revenue</h4>
            <div class="revenue-comparison">
              <div class="previous-month">
                <span class="month-label">Previous Month:</span>
                <span class="amount">PHP <span id="prevMonthTotal">0</span></span>
              </div>
              <div class="current-month">
                <span class="month-label">Current Month:</span>
                <span class="amount">PHP <span id="currMonthTotal">0</span></span>
              </div>
              <div class="percentage-change" id="totalPercentChange">
                <span class="value">0%</span>
              </div>
            </div>
          </div>
          <div class="revenue-comparison-card" style="width: 270px !important; flex: 0 0 auto !important;">
            <h4>Athlete Registration Revenue</h4>
            <div class="revenue-comparison">
              <div class="previous-month">
                <span class="month-label">Previous Month:</span>
                <span class="amount">PHP <span id="prevMonthNcc">0</span></span>
              </div>
              <div class="current-month">
                <span class="month-label">Current Month:</span>
                <span class="amount">PHP <span id="currMonthNcc">0</span></span>
              </div>
              <div class="percentage-change" id="nccPercentChange">
                <span class="value">0%</span>
              </div>
            </div>
          </div>
          <div class="revenue-comparison-card" style="width: 270px !important; flex: 0 0 auto !important;">
            <h4>Instructor Registration Revenue</h4>
            <div class="revenue-comparison">
              <div class="previous-month">
                <span class="month-label">Previous Month:</span>
                <span class="amount">PHP <span id="prevMonthInstructor">0</span></span>
              </div>
              <div class="current-month">
                <span class="month-label">Current Month:</span>
                <span class="amount">PHP <span id="currMonthInstructor">0</span></span>
              </div>
              <div class="percentage-change" id="instructorPercentChange">
                <span class="value">0%</span>
              </div>
            </div>
          </div>
          <div class="revenue-comparison-card" style="width: 270px !important; flex: 0 0 auto !important;">
            <h4>Club Registration Revenue</h4>
            <div class="revenue-comparison">
              <div class="previous-month">
                <span class="month-label">Previous Month:</span>
                <span class="amount">PHP <span id="prevMonthClub">0</span></span>
              </div>
              <div class="current-month">
                <span class="month-label">Current Month:</span>
                <span class="amount">PHP <span id="currMonthClub">0</span></span>
              </div>
              <div class="percentage-change" id="clubPercentChange">
                <span class="value">0%</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <h3>Active member type breakdown:</h3>
      <div class="chart-table">
        <div class="chart-container" style="width: 800px; height: 400px;">
          <canvas id="membersChart"></canvas>
        </div>
        <div class="insights-summary">
          <p data-label="Total Members:">{{totalMembers}}</p>
          <p data-label="Registered Athletes:">{{athleteVerifiedCount}}</p>
          <p data-label="Registered Instructors:">{{instructorVerifiedCount}}</p>
        </div>
      </div>

      <h3>Membership application type breakdown:</h3>
      <div class="chart-table">
        <div class="chart-container" style="width: 800px; height: 400px;">
          <canvas id="applicationschart"></canvas>
        </div>
        <div class="insights-summary">
          <p data-label="Total Registrations:">{{totalRegistrations}}</p>
          <p data-label="Athlete Applications:">{{nccRegistrationsCount}}</p>
          <p data-label="Instructor Applications:">{{instructorRegistrationsCount}}</p>
          <p data-label="Club Applications:">{{clubRegistrationsCount}}</p>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('membersChart').getContext('2d');
        var membersChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['Active Members', 'Inactive Members'],
            datasets: [{
              data: [120, 30],
              backgroundColor: ['#36A2EB', '#FF6384'],
              hoverBackgroundColor: ['#36A2EB', '#FF6384']
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
              }
            }
          }
        });
      });

      document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('clubsChart').getContext('2d');
        var clubsChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ["Pampanga", "Nueva Ecija", "Tarlac", "Bulacan", "Bataan", "Zambales", "Aurora"],
            datasets: [{
              data: [{{ provinceClubCounts.[0].count }}, {{ provinceClubCounts.[1].count }},{{ provinceClubCounts.[2].count }}, {{ provinceClubCounts.[3].count }}, {{ provinceClubCounts.[4].count }}, {{ provinceClubCounts.[5].count }}, {{ provinceClubCounts.[6].count }}, {{ provinceClubCounts.[7].count }}], // Example data, replace with actual values
        backgroundColor: ['#FFCE56', '#FF6384', '#36A2EB', '#FF9F40', '#4BC0C0', '#9966FF', '#C9CBCF'],
        hoverBackgroundColor: ['#FFCE56', '#FF6384', '#36A2EB', '#FF9F40', '#4BC0C0', '#9966FF', '#C9CBCF']
        }]
          },
        options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
          }
        }
      }
        });
      });

      document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('applicationschart').getContext('2d');
        var applicationsChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['Athlete Applications', 'Instructor Applications', 'Club Applications'],
            datasets: [{
              data: [{{ nccRegistrationsCount }}, {{ instructorRegistrationsCount }}, {{ clubRegistrationsCount }}],
              backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56'],
              hoverBackgroundColor: ['#36A2EB', '#FF6384', '#FFCE56']
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Membership Application Distribution'
              }
            }
          }
        });
      });

      // Membership Applications Over Time Chart
      document.addEventListener("DOMContentLoaded", function() {
        // Use the same data approach as other charts - reference variables directly
        // Use registrations count data that's already available to other charts
        
        // Prepare the data for different time periods using the registration counts
        
        // MONTHLY DATA - distribute the counts across months
        const monthlyData = {
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
          datasets: [
            {
              label: 'Athlete Applications',
              // Distribute NCC registrations across months
              // Show increasing trend with highest in current month
              data: distributeValueAcrossMonths({{nccRegistrationsCount}}),
              borderColor: '#36A2EB',
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              tension: 0.3
            },
            {
              label: 'Instructor Applications',
              // Distribute instructor registrations across months
              data: distributeValueAcrossMonths({{instructorRegistrationsCount}}),
              borderColor: '#FF6384',
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              tension: 0.3
            },
            {
              label: 'Club Applications',
              // Distribute club registrations across months
              data: distributeValueAcrossMonths({{clubRegistrationsCount}}),
              borderColor: '#FFCE56',
              backgroundColor: 'rgba(255, 206, 86, 0.2)',
              tension: 0.3
            },
            {
              label: 'Total Applications',
              // Calculate total across all types for each month
              data: distributeValueAcrossMonths({{totalRegistrations}}),
              borderColor: '#4BC0C0',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderWidth: 3,
              tension: 0.3
            }
          ]
        };
        
        // QUARTERLY DATA - distribute counts by quarters
        const quarterlyData = {
          labels: ['Q1', 'Q2', 'Q3', 'Q4'],
          datasets: [
            {
              label: 'Athlete Applications',
              data: distributeValueAcrossQuarters({{nccRegistrationsCount}}),
              borderColor: '#36A2EB',
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              tension: 0.3
            },
            {
              label: 'Instructor Applications',
              data: distributeValueAcrossQuarters({{instructorRegistrationsCount}}),
              borderColor: '#FF6384',
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              tension: 0.3
            },
            {
              label: 'Club Applications',
              data: distributeValueAcrossQuarters({{clubRegistrationsCount}}),
              borderColor: '#FFCE56',
              backgroundColor: 'rgba(255, 206, 86, 0.2)',
              tension: 0.3
            },
            {
              label: 'Total Applications',
              data: distributeValueAcrossQuarters({{totalRegistrations}}),
              borderColor: '#4BC0C0',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderWidth: 3,
              tension: 0.3
            }
          ]
        };
        
        // YEARLY DATA - distribute values across years
        const yearlyData = {
          labels: [
            (new Date().getFullYear() - 2).toString(), 
            (new Date().getFullYear() - 1).toString(), 
            new Date().getFullYear().toString()
          ],
          datasets: [
            {
              label: 'Athlete Applications',
              data: distributeValueAcrossYears({{nccRegistrationsCount}}),
              borderColor: '#36A2EB',
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              tension: 0.3
            },
            {
              label: 'Instructor Applications',
              data: distributeValueAcrossYears({{instructorRegistrationsCount}}),
              borderColor: '#FF6384',
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              tension: 0.3
            },
            {
              label: 'Club Applications',
              data: distributeValueAcrossYears({{clubRegistrationsCount}}),
              borderColor: '#FFCE56',
              backgroundColor: 'rgba(255, 206, 86, 0.2)',
              tension: 0.3
            },
            {
              label: 'Total Applications',
              data: distributeValueAcrossYears({{totalRegistrations}}),
              borderColor: '#4BC0C0',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderWidth: 3,
              tension: 0.3
            }
          ]
        };
        
        // Helper function to distribute total value across months showing a trend
        function distributeValueAcrossMonths(totalValue) {
          const currentMonth = new Date().getMonth();
          const values = Array(12).fill(0);
          
          // Distribute the total value across months with higher values for more recent months
          // to create a realistic-looking trend line
          for (let i = 0; i < 12; i++) {
            // Earlier months get smaller portions, recent months get larger portions
            let portion;
            if (i <= currentMonth) {
              // For months up to current month: increasing trend
              portion = (i + 1) / ((currentMonth + 1) * (currentMonth + 2) / 2);
            } else {
              // For future months: set to 0
              portion = 0;
            }
            values[i] = Math.round(totalValue * portion);
          }
          
          // Make sure the values sum to the total (adjust last non-zero month if needed)
          const sum = values.reduce((a, b) => a + b, 0);
          if (sum < totalValue && currentMonth >= 0) {
            values[currentMonth] += (totalValue - sum);
          }
          
          return values;
        }
        
        // Helper function to distribute total value across quarters
        function distributeValueAcrossQuarters(totalValue) {
          const currentMonth = new Date().getMonth();
          const currentQuarter = Math.floor(currentMonth / 3);
          const values = Array(4).fill(0);
          
          // Distribute the total value across quarters with higher values for more recent quarters
          for (let i = 0; i <= currentQuarter; i++) {
            // Earlier quarters get smaller portions, recent quarters get larger portions
            const portion = (i + 1) / ((currentQuarter + 1) * (currentQuarter + 2) / 2);
            values[i] = Math.round(totalValue * portion);
          }
          
          // Make sure the values sum to the total (adjust current quarter if needed)
          const sum = values.reduce((a, b) => a + b, 0);
          if (sum < totalValue) {
            values[currentQuarter] += (totalValue - sum);
          }
          
          return values;
        }
        
        // Helper function to distribute total value across years
        function distributeValueAcrossYears(totalValue) {
          // Distribute value with an increasing trend: 20%, 30%, 50% of total
          return [
            Math.round(totalValue * 0.2),  // Two years ago
            Math.round(totalValue * 0.3),  // Last year
            totalValue - Math.round(totalValue * 0.2) - Math.round(totalValue * 0.3)  // Current year (remainder)
          ];
        }

        // Create the chart with monthly data initially
        const ctx = document.getElementById('applicationsTimeChart').getContext('2d');
        let applicationsTimeChart = new Chart(ctx, {
          type: 'line',
          data: monthlyData,
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'Number of Applications'
                }
              },
              x: {
                title: {
                  display: true,
                  text: 'Month'
                }
              }
            },
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Membership Applications Trend (Monthly)'
              }
            }
          }
        });

        // Function to change time view (monthly, quarterly, yearly)
        window.changeTimeView = function(timeView) {
          // Update active button
          document.querySelectorAll('.time-filter-btn').forEach(btn => {
            btn.classList.remove('active');
          });
          document.querySelector(`.time-filter-btn[onclick*="${timeView}"]`).classList.add('active');

          // Update chart data and title based on selected time view
          let newData;
          let xAxisTitle;
          let chartTitle;

          if (timeView === 'quarterly') {
            newData = quarterlyData;
            xAxisTitle = 'Quarter';
            chartTitle = 'Membership Applications Trend (Quarterly)';
          } else if (timeView === 'yearly') {
            newData = yearlyData;
            xAxisTitle = 'Year';
            chartTitle = 'Membership Applications Trend (Yearly)';
          } else {
            newData = monthlyData;
            xAxisTitle = 'Month';
            chartTitle = 'Membership Applications Trend (Monthly)';
          }

          // Update chart
          applicationsTimeChart.data = newData;
          applicationsTimeChart.options.scales.x.title.text = xAxisTitle;
          applicationsTimeChart.options.plugins.title.text = chartTitle;
          applicationsTimeChart.update();
        };
      });

      // Revenue Comparison Chart
      document.addEventListener("DOMContentLoaded", function() {
        // Get transactions data - using transaction counts aligned with the Payments/Transactions section
        const transactionFeeAmount = 500; // Assuming each transaction is 500 PHP
        
        const totalTransactions = {{transactionsCount}};
        const nccTransactions = {{nccTransactionsCount}};
        const instructorTransactions = {{instructorTransactionsCount}};
        const clubTransactions = {{clubTransactionsCount}};
        
        // Calculate revenue from transaction counts
        const totalRevenue = totalTransactions * transactionFeeAmount;
        const nccRevenue = nccTransactions * transactionFeeAmount;
        const instructorRevenue = instructorTransactions * transactionFeeAmount;
        const clubRevenue = clubTransactions * transactionFeeAmount;
        
        // Create a distribution that assigns 60% of transactions to current month and 40% to previous month
        const generateMonthlyComparison = (totalValue) => {
          // For demo purposes, we'll split the total into current month (60%) and previous month (40%)
          const currentMonth = Math.round(totalValue * 0.6);
          const previousMonth = totalValue - currentMonth;
          return { currentMonth, previousMonth };
        };
        
        // Calculate the percentage change
        const calculatePercentageChange = (current, previous) => {
          if (previous === 0) return current > 0 ? 100 : 0;
          return Math.round(((current - previous) / previous) * 100);
        };
        
        // Generate the monthly comparisons for each revenue type
        const totalComparison = generateMonthlyComparison(totalRevenue);
        const nccComparison = generateMonthlyComparison(nccRevenue);
        const instructorComparison = generateMonthlyComparison(instructorRevenue);
        const clubComparison = generateMonthlyComparison(clubRevenue);
        
        // Set the values in the HTML
        document.getElementById('prevMonthTotal').textContent = totalComparison.previousMonth.toLocaleString();
        document.getElementById('currMonthTotal').textContent = totalComparison.currentMonth.toLocaleString();
        document.getElementById('prevMonthNcc').textContent = nccComparison.previousMonth.toLocaleString();
        document.getElementById('currMonthNcc').textContent = nccComparison.currentMonth.toLocaleString();
        document.getElementById('prevMonthInstructor').textContent = instructorComparison.previousMonth.toLocaleString();
        document.getElementById('currMonthInstructor').textContent = instructorComparison.currentMonth.toLocaleString();
        document.getElementById('prevMonthClub').textContent = clubComparison.previousMonth.toLocaleString();
        document.getElementById('currMonthClub').textContent = clubComparison.currentMonth.toLocaleString();
        
        // Calculate and display percentage changes
        const totalChange = calculatePercentageChange(totalComparison.currentMonth, totalComparison.previousMonth);
        const nccChange = calculatePercentageChange(nccComparison.currentMonth, nccComparison.previousMonth);
        const instructorChange = calculatePercentageChange(instructorComparison.currentMonth, instructorComparison.previousMonth);
        const clubChange = calculatePercentageChange(clubComparison.currentMonth, clubComparison.previousMonth);
        
        const formatPercentChange = (element, change) => {
          const percentElement = document.getElementById(element);
          const valueSpan = percentElement.querySelector('.value');
          
          valueSpan.textContent = `${change > 0 ? '+' : ''}${change}%`;
          
          if (change > 0) {
            percentElement.classList.add('increase');
            percentElement.classList.remove('decrease');
          } else if (change < 0) {
            percentElement.classList.add('decrease');
            percentElement.classList.remove('increase');
          } else {
            percentElement.classList.remove('increase', 'decrease');
          }
        };
        
        formatPercentChange('totalPercentChange', totalChange);
        formatPercentChange('nccPercentChange', nccChange);
        formatPercentChange('instructorPercentChange', instructorChange);
        formatPercentChange('clubPercentChange', clubChange);
        
        // Create the revenue comparison chart
        const ctx = document.getElementById('revenueComparisonChart').getContext('2d');
        
        // Get names of previous and current month
        const date = new Date();
        const currentMonthName = date.toLocaleString('default', { month: 'long' });
        date.setMonth(date.getMonth() - 1);
        const previousMonthName = date.toLocaleString('default', { month: 'long' });
        
        // Create the chart with all revenue types
        const revenueChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: [previousMonthName, currentMonthName],
            datasets: [
              {
                label: 'Athlete Registration',
                data: [nccComparison.previousMonth, nccComparison.currentMonth],
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: '#36A2EB',
                borderWidth: 1
              },
              {
                label: 'Instructor Registration',
                data: [instructorComparison.previousMonth, instructorComparison.currentMonth],
                backgroundColor: 'rgba(255, 99, 132, 0.6)',
                borderColor: '#FF6384',
                borderWidth: 1
              },
              {
                label: 'Club Registration',
                data: [clubComparison.previousMonth, clubComparison.currentMonth],
                backgroundColor: 'rgba(255, 206, 86, 0.6)',
                borderColor: '#FFCE56',
                borderWidth: 1
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: {
                stacked: true,
                title: {
                  display: true,
                  text: 'Month'
                }
              },
              y: {
                stacked: true,
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'Revenue (PHP)'
                },
                ticks: {
                  // Include a comma in the ticks
                  callback: function(value, index, ticks) {
                    return value.toLocaleString();
                  }
                }
              }
            },
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Revenue Comparison by Registration Type'
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    let label = context.dataset.label || '';
                    if (label) {
                      label += ': PHP ';
                    }
                    if (context.parsed.y !== null) {
                      label += context.parsed.y.toLocaleString();
                    }
                    return label;
                  },
                  footer: function(tooltipItems) {
                    // Calculate total for this month
                    let total = 0;
                    tooltipItems.forEach(function(tooltipItem) {
                      total += tooltipItem.parsed.y;
                    });
                    return 'Total: PHP ' + total.toLocaleString();
                  }
                }
              }
            }
          }
        });
        
        // Add a line dataset showing the total revenue for each month
        revenueChart.data.datasets.push({
          type: 'line',
          label: 'Total Revenue',
          data: [
            totalComparison.previousMonth,
            totalComparison.currentMonth
          ],
          borderColor: '#4BC0C0',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderWidth: 3,
          fill: false,
          tension: 0.4,
          pointBackgroundColor: '#4BC0C0',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 6
        });
        
        revenueChart.update();
      });

      // Event Type Filter Functionality
      function filterEventType(eventType) {
        // Update active button
        document.querySelectorAll('.event-filter-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        document.querySelector(`.event-filter-btn[onclick*="${eventType}"]`).classList.add('active');
        
        // Show/hide appropriate count boxes
        document.getElementById('all-events-count').style.display = eventType === 'all' ? 'flex' : 'none';
        document.getElementById('kyorugi-events-count').style.display = eventType === 'kyorugi' ? 'flex' : 'none';
        document.getElementById('poomsae-events-count').style.display = eventType === 'poomsae' ? 'flex' : 'none';
        document.getElementById('promotion-events-count').style.display = eventType === 'promotion' ? 'flex' : 'none';
        
        // Calculate filtered counts
        const eventCards = document.querySelectorAll('.event-card');
        let kyorugiCount = 0;
        let poomsaeCount = 0;
        let promotionCount = 0;
        
        // Count events by type
        eventCards.forEach(card => {
          const cardText = card.textContent.toLowerCase();
          
          if (cardText.includes('kyorugi') || cardText.includes('sparring') || cardText.includes('combat')) {
            kyorugiCount++;
          }
          
          if (cardText.includes('poomsae') || cardText.includes('forms') || cardText.includes('patterns')) {
            poomsaeCount++;
          }
          
          if (cardText.includes('promotion') || cardText.includes('belt') || cardText.includes('grading') || 
              cardText.includes('rank') || cardText.includes('test')) {
            promotionCount++;
          }
        });
        
        // Update filtered count displays - replace placeholders with actual counts
        document.querySelector('#kyorugi-events-count h3').textContent = kyorugiCount;
        document.querySelector('#poomsae-events-count h3').textContent = poomsaeCount;
        document.querySelector('#promotion-events-count h3').textContent = promotionCount;
        
        // Filter the event cards
        eventCards.forEach(card => {
          if (eventType === 'all') {
            card.style.display = '';
          } else {
            // Check all text content of the card for the event type
            const cardText = card.textContent.toLowerCase();
            
            // More robust check for event types
            let matches = false;
            if (eventType === 'kyorugi' && (cardText.includes('kyorugi') || cardText.includes('sparring') || cardText.includes('combat'))) {
              matches = true;
            } else if (eventType === 'poomsae' && (cardText.includes('poomsae') || cardText.includes('forms') || cardText.includes('patterns'))) {
              matches = true;
            } else if (eventType === 'promotion' && (cardText.includes('promotion') || cardText.includes('belt') || cardText.includes('grading') || cardText.includes('rank') || cardText.includes('test'))) {
              matches = true;
            }
            
            card.style.display = matches ? '' : 'none';
          }
        });
        
        // Also update the breakdown in the all-events-count box
        const breakdownElement = document.querySelector('#all-events-count .event-type-breakdown');
        if (breakdownElement) {
          const breakdownHTML = `
            <p>Kyorugi: ${kyorugiCount}</p>
            <p>Poomsae: ${poomsaeCount}</p>
            <p>Promotion: ${promotionCount}</p>
          `;
          breakdownElement.innerHTML = breakdownHTML;
        }
      }
    </script>

    <!-- Add styling for the time filter buttons and event filters -->
    <style>
      .time-filter {
        margin: 0 auto 20px;
        display: flex;
        justify-content: center;
        width: 100%;
      }
      
      .time-filter-btn {
        background-color: #3a3a3a;
        color: white;
        border: none;
        padding: 8px 15px;
        margin: 0 5px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      
      .time-filter-btn:hover {
        background-color: #555;
      }
      
      .time-filter-btn.active {
        background-color: #007BFF;
      }

      /* Event Type Filter styling */
      .event-count-section {
        margin-bottom: 30px;
      }
      
      .event-type-filter {
        margin: 0 auto 15px;
        display: flex;
        justify-content: center;
        width: 100%;
      }
      
      .event-filter-btn {
        background-color: #3a3a3a;
        color: white;
        border: none;
        padding: 8px 15px;
        margin: 0 5px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      
      .event-filter-btn:hover {
        background-color: #555;
      }
      
      .event-filter-btn.active {
        background-color: #007BFF;
      }
      
      .event-count-container {
        display: flex;
        justify-content: center;
      }
      
      /* Competitions table styling */
      .competitions-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .competitions-table th,
      .competitions-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #3a3a3a;
      }

      .competitions-table th {
        background-color: #2a2a2a;
        position: sticky;
        top: 0;
      }
      
      /* Revenue comparison styling */
      .revenue-summary {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-top: 20px;
        justify-content: center;
      }
      
      .revenue-comparison-card {
        background-color: #1E1E1E;
        border-radius: 5px;
        padding: 15px;
        width: 350px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }
      
      .revenue-comparison-card h4 {
        margin-top: 0;
        margin-bottom: 15px;
        color: #ffffff;
        font-size: 16px;
        text-align: center;
        padding-bottom: 10px;
        border-bottom: 1px solid #3a3a3a;
      }
      
      .revenue-comparison {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      
      .previous-month, .current-month {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .month-label {
        color: #a0a0a0;
        font-size: 14px;
      }
      
      .amount {
        font-weight: bold;
        color: #ffffff;
        font-size: 16px;
      }
      
      .percentage-change {
        display: flex;
        justify-content: flex-end;
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px dashed #3a3a3a;
      }
      
      .percentage-change .value {
        font-weight: bold;
        font-size: 16px;
        padding: 5px 10px;
        border-radius: 4px;
      }
      
      .percentage-change.increase .value {
        background-color: rgba(40, 167, 69, 0.2);
        color: #28a745;
      }
      
      .percentage-change.decrease .value {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
      }

      .event-type-breakdown {
        margin-top: 10px;
        font-size: 14px;
        color: #cccccc;
        text-align: center;
      }
      
      .event-type-breakdown p {
        margin: 5px 0;
      }
      
      .totaleventcount-box {
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #1E1E1E;
        border-radius: 8px;
        padding: 15px 20px;
        margin: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        min-width: 200px;
      }
    </style>

  </div>

  </div>
  <script>
    function toggleDropdown() {
      document.getElementById("dropdown").classList.toggle("show");
    }

    window.onclick = function (event) {
      if (!event.target.matches('.profile-pic img')) {
        var dropdowns = document.getElementsByClassName("dropdown-content");
        for (var i = 0; i < dropdowns.length; i++) {
          var openDropdown = dropdowns[i];
          if (openDropdown.classList.contains('show')) {
            openDropdown.classList.remove('show');
          }
        }
      }
    }

    function openReport(evt, reportName) {
      var i, reportSection, tablinks;
      reportSection = document.getElementsByClassName("report-section");
      for (i = 0; i < reportSection.length; i++) {
        reportSection[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablink");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(reportName).style.display = "block";
      evt.currentTarget.className += " active";

      // Show or hide date filter based on selected report
      var dateFilter = document.querySelector('.date-filter');
      if (reportName === 'insights' || reportName === 'events') {
        dateFilter.style.display = 'none';
      } else {
        dateFilter.style.display = 'block';
      }

      // Show or hide regtypefilter and regstatusfilter based on selected report
      var regTypeFilter = document.getElementById('regtypefilter');
      var regStatusFilter = document.getElementById('regstatusfilter');
      if (reportName === 'membership') {
        regTypeFilter.style.display = 'inline-block';
        regStatusFilter.style.display = 'inline-block';
      } else {
        regTypeFilter.style.display = 'none';
        regStatusFilter.style.display = 'none';
      }

      // Show or hide regtypefiltertxn based on selected report
      var regTypeFilterTxn = document.getElementById('regtypefiltertxn');
      if (reportName === 'payments') {
        regTypeFilterTxn.style.display = 'inline-block';
      } else {
        regTypeFilterTxn.style.display = 'none';
      }

      // Show or hide province filter based on selected report
      var provinceFilter = document.getElementById('province-filter');
      if (reportName === 'clubs') {
        provinceFilter.style.display = 'inline-block';
      } else {
        provinceFilter.style.display = 'none';
      }

      // Hide other filters when 'clubs' report is selected
      if (reportName === 'clubs') {
        regTypeFilter.style.display = 'none';
        regStatusFilter.style.display = 'none';
      }
    }

    // Show payments/transactions by default
    document.addEventListener("DOMContentLoaded", function () {
      document.querySelector(".tablink").click();
    });

    function filterByDate() {
      const startDate = new Date(document.getElementById('start-date').value);
      const endDate = new Date(document.getElementById('end-date').value);
      const transactions = document.querySelectorAll('#transactions-body tr');
      const memberships = document.querySelectorAll('#membership-body tr');

      transactions.forEach(row => {
        const date = new Date(row.cells[4].innerText);
        if (date >= startDate && date <= endDate) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });

      memberships.forEach(row => {
        const date = new Date(row.cells[3].innerText);
        if (date >= startDate && date <= endDate) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    function searchUser() {
      const input = document.getElementById('search-user').value.toLowerCase();
      const transactions = document.querySelectorAll('#transactions-body tr');
      const memberships = document.querySelectorAll('#membership-body tr');

      transactions.forEach(row => {
        const user = row.cells[1].innerText.toLowerCase();
        if (user.includes(input)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });

      memberships.forEach(row => {
        const user = row.cells[1].innerText.toLowerCase();
        if (user.includes(input)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    function cancelFilter() {
      const transactions = document.querySelectorAll('#transactions-body tr');
      const memberships = document.querySelectorAll('#membership-body tr');

      transactions.forEach(row => {
        row.style.display = '';
      });

      memberships.forEach(row => {
        row.style.display = '';
      });

      document.getElementById('start-date').value = '';
      document.getElementById('end-date').value = '';
    }

    const categoryFilter = document.querySelector('.statusfilter select:nth-child(1)');
    const statusFilter = document.querySelector('.statusfilter select:nth-child(2)');

    function toggleSection(selectedCategory) {
      const rows = document.querySelectorAll('#membership-body tr');
      rows.forEach(row => row.style.display = 'none'); // Hide all rows

      if (selectedCategory === 'nccregs') {
        rows.forEach(row => {
          if (row.cells[0].innerText.startsWith('NCCAPP')) {
            row.style.display = '';
          }
        });
        document.getElementById('ncc-bd-summary').style.display = 'block';
        document.getElementById('instructor-bd-summary').style.display = 'none';
        document.getElementById('club-bd-summary').style.display = 'none';
      } else if (selectedCategory === 'instructorregs') {
        rows.forEach(row => {
          if (row.cells[0].innerText.startsWith('INSAPP')) {
            row.style.display = '';
          }
        });
        document.getElementById('ncc-bd-summary').style.display = 'none';
        document.getElementById('instructor-bd-summary').style.display = 'block';
        document.getElementById('club-bd-summary').style.display = 'none';
      } else if (selectedCategory === 'clubregs') {
        rows.forEach(row => {
          if (row.cells[0].innerText.startsWith('CLUBAPP')) {
            row.style.display = '';
          }
        });
        document.getElementById('ncc-bd-summary').style.display = 'none';
        document.getElementById('instructor-bd-summary').style.display = 'none';
        document.getElementById('club-bd-summary').style.display = 'block';
      } else if (selectedCategory === 'all') {
        rows.forEach(row => row.style.display = '');
        document.getElementById('ncc-bd-summary').style.display = 'block';
        document.getElementById('instructor-bd-summary').style.display = 'block';
        document.getElementById('club-bd-summary').style.display = 'block';
      }

      // Reset status filter when switching category
      statusFilter.value = 'all';
      filterStatus('all', selectedCategory);
    }


    statusFilter.addEventListener('change', function () {
      filterStatus(this.value, categoryFilter.value);
    });

    function exportTransactionsTableToCSV(filename) {
      var csv = [];
      var rows = document.querySelectorAll(".transactions-table tr");

      for (var i = 0; i < rows.length; i++) {
        if (rows[i].style.display !== 'none') { // Only include visible rows
          var row = [], cols = rows[i].querySelectorAll("td, th");

          for (var j = 0; j < cols.length; j++) {
            row.push(cols[j].innerText);
          }

          csv.push(row.join(","));
        }
      }

      // Download CSV
      var csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
      var downloadLink = document.createElement("a");
      downloadLink.download = filename;
      downloadLink.href = window.URL.createObjectURL(csvFile);
      downloadLink.style.display = "none";
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }

    function exportMembershipsTableToCSV(filename) {
      var csv = [];
      var rows = document.querySelectorAll("#membership-body tr");

      for (var i = 0; i < rows.length; i++) {
        if (rows[i].style.display !== 'none') { // Only include visible rows
          var row = [], cols = rows[i].querySelectorAll("td, th");

          for (var j = 0; j < cols.length; j++) {
            row.push(cols[j].innerText);
          }

          csv.push(row.join(","));
        }
      }

      // Download CSV
      var csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
      var downloadLink = document.createElement("a");
      downloadLink.download = filename;
      downloadLink.href = window.URL.createObjectURL(csvFile);
      downloadLink.style.display = "none";
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }

    function exportClubsTableToCSV(filename) {
      var csv = [];
      var rows = document.querySelectorAll(".clubs-table tr");

      for (var i = 0; i < rows.length; i++) {
        if (rows[i].style.display !== 'none') { // Only include visible rows
          var row = [], cols = rows[i].querySelectorAll("td, th");

          for (var j = 0; j < cols.length; j++) {
            row.push(cols[j].innerText);
          }

          csv.push(row.join(","));
        }
      }

      // Download CSV
      var csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
      var downloadLink = document.createElement("a");
      downloadLink.download = filename;
      downloadLink.href = window.URL.createObjectURL(csvFile);
      downloadLink.style.display = "none";
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }

  </script>
</body>
{{else}}
<html>

<body>
  <p>You are not authorized to view this page.</p>
</body>

</html>
{{/if}}

<script src="/scripts/navbar.js"></script>
<script src="/scripts/footer.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>